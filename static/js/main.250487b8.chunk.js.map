{"version":3,"sources":["utils/generateBoard.ts","components/Board/Square.tsx","components/Board/index.tsx","components/HighScore/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getNumberOfNearByMines","gameBoard","row","col","board","nearByTiles","r","c","current","push","reduce","acc","t","isMine","newBoardRow","nrRows","mines","rows","i","open","some","m","marked","nextToMines","newBoard","boardSize","minesNr","minesLocation","randomNr","nr","Math","floor","random","mine","length","getMines","map","tile","Square","cssClass","leftClick","rightClick","className","onClick","e","onContextMenu","toLocaleString","iconRender","Board","handleOpenTile","handleMarkingTile","handleLeftClick","preventDefault","handleRightClick","HighScore","secToMinSec","useState","highScore","setHighScore","useEffect","store","localStorage","getItem","JSON","parse","time","key","App","setGameBoard","setBoardSize","gameStarted","setGameStarted","gameOver","setGameOver","flagsLeft","setFlagsLeft","timeCounter","setTimeCounter","timer","setInterval","old","clearInterval","finalTime","setItem","stringify","sort","a","b","slice","openTiles","tempBoard","boardLength","s","min","sec","value","onChange","parseInt","target","label","bSize","boardMines","handleNewGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.250487b8.chunk.js","sourcesContent":["import { Mines, GameBoard, Row, Tile } from \"./boardTypes\";\r\n\r\nconst getMines = (minesNr: number, boardSize: number): Mines => {\r\n  let minesLocation: Mines = [];\r\n  const randomNr = (nr: number) => Math.floor(Math.random() * nr);\r\n\r\n  while (minesLocation.length < minesNr) {\r\n    const mine = { row: randomNr(boardSize), col: randomNr(boardSize) };\r\n\r\n    if (!minesLocation.some((m) => m.col === mine.col && m.row === mine.row)) {\r\n      minesLocation.push(mine);\r\n    }\r\n  }\r\n\r\n  return minesLocation;\r\n};\r\n\r\nconst getNumberOfNearByMines = ({ row, col }: Tile, gameBoard: GameBoard) => {\r\n  let board = [...gameBoard];\r\n  let nearByTiles: Row = [];\r\n\r\n  for (let r = row - 1; r <= row + 1; r++) {\r\n    for (let c = col - 1; c <= col + 1; c++) {\r\n      let current = board[r]?.[c];\r\n      if (current) nearByTiles.push(current);\r\n    }\r\n  }\r\n\r\n  return nearByTiles.reduce((acc, t) => (t.isMine ? acc + 1 : acc), 0);\r\n};\r\n\r\nconst newBoardRow = (row: number, nrRows: number, mines: Mines): Row => {\r\n  let rows: Row = [];\r\n  for (let i = 0; i < nrRows; i++) {\r\n    rows = [\r\n      ...rows,\r\n      {\r\n        open: false,\r\n        isMine: mines.some((m) => m.col === i && m.row === row),\r\n        marked: false,\r\n        nextToMines: 0,\r\n        row,\r\n        col: i,\r\n      },\r\n    ];\r\n  }\r\n  return rows;\r\n};\r\n\r\nexport const newBoard = (boardSize: number, minesNr: number): GameBoard => {\r\n  let board: GameBoard = [];\r\n  let minesLocation = getMines(minesNr, boardSize);\r\n\r\n  for (let i = 0; i < boardSize; i++) {\r\n    board = [...board, newBoardRow(i, boardSize, minesLocation)];\r\n  }\r\n\r\n  return board.map((row) => {\r\n    return row.map((tile) => {\r\n      return { ...tile, nextToMines: getNumberOfNearByMines(tile, board) };\r\n    });\r\n  });\r\n};\r\n","import { Tile } from \"../../utils/boardTypes\";\r\n\r\ntype Props = {\r\n  cssClass: string;\r\n  tile: Tile;\r\n  leftClick: (e: React.MouseEvent, tile: Tile) => void;\r\n  rightClick: (e: React.MouseEvent, tile: Tile) => void;\r\n};\r\n\r\nconst Square = ({ cssClass, tile, leftClick, rightClick }: Props) => {\r\n  const iconRender = ({ open, marked, isMine }: Tile): string => {\r\n    if (open) {\r\n      if (isMine) return \"💥\";\r\n      return tile.nextToMines > 0 ? tile.nextToMines.toLocaleString() : \"\";\r\n    }\r\n    if (marked) return \"🚩\";\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={cssClass} onClick={(e) => leftClick(e, tile)} onContextMenu={(e) => rightClick(e, tile)}>\r\n      <span>{iconRender(tile)}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import { GameBoard, Tile } from \"../../utils/boardTypes\";\r\nimport Square from \"./Square\";\r\n\r\ntype Props = {\r\n  gameBoard: GameBoard;\r\n  handleOpenTile: (tile: Tile) => void;\r\n  handleMarkingTile: ({ row, col }: Tile) => void;\r\n};\r\n\r\nconst Board = ({ gameBoard, handleOpenTile, handleMarkingTile }: Props) => {\r\n  const handleLeftClick = (e: React.MouseEvent, tile: Tile) => {\r\n    e.preventDefault();\r\n    handleOpenTile(tile);\r\n  };\r\n\r\n  const handleRightClick = (e: React.MouseEvent, tile: Tile) => {\r\n    e.preventDefault();\r\n    handleMarkingTile(tile);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {gameBoard.map((row, r) => (\r\n        <div className=\"row\" key={`row ${r}`}>\r\n          {row.map((tile, c) => (\r\n            <Square\r\n              key={`column ${c}`}\r\n              cssClass={`block ${!tile.open ? \"hidden\" : tile.isMine ? \"gameOver\" : \"open\"}`}\r\n              tile={tile}\r\n              leftClick={handleLeftClick}\r\n              rightClick={handleRightClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { useEffect, useState } from \"react\";\r\n\r\ntype Props = {\r\n  boardSize: number;\r\n  secToMinSec: (time: number) => string;\r\n};\r\n\r\nconst HighScore = ({ boardSize, secToMinSec }: Props) => {\r\n  const [highScore, setHighScore] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    const store = localStorage.getItem(`highScore${boardSize}`);\r\n    if (store) return setHighScore(JSON.parse(store));\r\n    setHighScore([]);\r\n  }, [boardSize]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Hight Score for {boardSize}x{boardSize}\r\n      </h1>\r\n      {highScore.length > 0 ? (\r\n        <ol>\r\n          {highScore.map((time, key) => {\r\n            return <li key={`${time}-${key}`}>{secToMinSec(time)}</li>;\r\n          })}\r\n        </ol>\r\n      ) : (\r\n        <span>Couldn't find any high scores.</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HighScore;\r\n","import { useState, useEffect } from \"react\";\nimport { GameBoard, Tile } from \"./utils/boardTypes\";\nimport { newBoard } from \"./utils/generateBoard\";\nimport Board from \"./components/Board\";\nimport HighScore from \"./components/HighScore\";\n\nfunction App() {\n  const [gameBoard, setGameBoard] = useState<GameBoard>([]);\n  const [boardSize, setBoardSize] = useState(15);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [flagsLeft, setFlagsLeft] = useState(0);\n  const [timeCounter, setTimeCounter] = useState(0);\n\n  useEffect(() => {\n    if (timeCounter > 1200 || !gameStarted) return;\n\n    const timer = setInterval(() => {\n      setTimeCounter((old) => old + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [timeCounter, gameStarted]);\n\n  useEffect(() => {\n    if (flagsLeft !== 0 || gameOver || !gameStarted) return;\n    const finalTime = timeCounter;\n\n    const minesLeft = gameBoard.reduce((acc, row) => {\n      return (\n        acc +\n        row.reduce((acc, tile) => {\n          if (tile.isMine && !tile.marked) return acc + 1;\n          return acc;\n        }, 0)\n      );\n    }, 0);\n    if (minesLeft > 0) return setGameOver(true);\n\n    const store = localStorage.getItem(`highScore${boardSize}`);\n\n    if (store) {\n      localStorage.setItem(\n        `highScore${boardSize}`,\n        JSON.stringify([...JSON.parse(store), finalTime].sort((a, b) => a - b).slice(0, 5))\n      );\n    } else {\n      localStorage.setItem(`highScore${boardSize}`, JSON.stringify([finalTime]));\n    }\n\n    setGameStarted(false);\n  }, [flagsLeft, gameOver, timeCounter, gameBoard, boardSize, gameStarted]);\n\n  const handleNewGame = (bSize: number) => {\n    let boardMines: number = Math.floor((bSize * bSize) / 6);\n\n    setFlagsLeft(boardMines);\n    setGameBoard(newBoard(bSize, boardMines));\n    setGameOver(false);\n    setGameStarted(true);\n    setTimeCounter(0);\n  };\n\n  const openTiles = (tile: Tile, board: GameBoard): GameBoard => {\n    let tempBoard = [...gameBoard];\n    const boardLength = board.length - 1;\n    tempBoard[tile.row][tile.col].open = true;\n\n    if (tile.nextToMines === 0) {\n      // lets find the 8 \"connecting\" tiles\n      for (let r = tile.row - 1; r <= tile.row + 1; r++) {\n        for (let c = tile.col - 1; c <= tile.col + 1; c++) {\n          // Make sure we don't \"leave\" the board\n          if (r >= 0 && r <= boardLength && c >= 0 && c <= boardLength) {\n            if (!tempBoard[r][c].open && !tempBoard[r][c].isMine) {\n              tempBoard[r][c].open = true;\n              openTiles(tempBoard[r][c], tempBoard);\n            }\n          }\n        }\n      }\n    }\n\n    return tempBoard;\n  };\n\n  const handleOpenTile = (tile: Tile) => {\n    if (tile.marked || flagsLeft === 0 || gameOver) return;\n\n    setGameBoard(openTiles(tile, gameBoard));\n\n    if (tile.isMine) setGameOver(true);\n  };\n\n  const handleMarkingTile = ({ row, col, open }: Tile) => {\n    if (open || flagsLeft === 0 || gameOver) return;\n    let tempBoard = [...gameBoard];\n\n    if (tempBoard[row][col].marked) {\n      tempBoard[row][col].marked = false;\n      setFlagsLeft((c) => c + 1);\n    } else {\n      tempBoard[row][col].marked = true;\n      setFlagsLeft((c) => c - 1);\n    }\n\n    setGameBoard(tempBoard);\n  };\n\n  const secToMinSec = (time: number): string => {\n    const m = Math.floor(time / 60);\n    const s = Math.floor(time % 60);\n\n    const min = m > 0 ? (m <= 9 ? `0${m}` : m) : \"00\";\n    const sec = s > 0 ? (s <= 9 ? `0${s}` : s) : \"00\";\n    return `${min}:${sec}`;\n  };\n\n  return (\n    <div className=\"board\">\n      <div className=\"gameSettings\">\n        <button onClick={() => setGameStarted(false)}>View High Score</button>\n        <select value={boardSize} onChange={(e) => setBoardSize(parseInt(e.target.value))}>\n          <optgroup label=\"Select Game Size\">\n            {[15, 20, 30, 40].map((bSize) => (\n              <option key={bSize} value={bSize}>\n                {bSize} x {bSize}\n              </option>\n            ))}\n          </optgroup>\n        </select>\n        <button onClick={() => handleNewGame(boardSize)}>Start Game</button>\n      </div>\n\n      {gameStarted ? (\n        <>\n          <div className=\"information\">\n            <span>\n              <span>🚩 {flagsLeft > 99 ? flagsLeft : flagsLeft > 9 ? `0${flagsLeft}` : `00${flagsLeft}`}</span>\n            </span>\n            {gameOver && <span className=\"gameOver\"> Game Over! </span>}\n            <span>\n              <span>{secToMinSec(timeCounter)} ⏱️</span>\n            </span>\n          </div>\n\n          <Board gameBoard={gameBoard} handleOpenTile={handleOpenTile} handleMarkingTile={handleMarkingTile} />\n        </>\n      ) : (\n        <>\n          {timeCounter > 0 && <h2>You cleared the minefield in {secToMinSec(timeCounter)}!</h2>}\n          <HighScore boardSize={boardSize} secToMinSec={secToMinSec} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}